#!/usr/bin/env bash

if [ -z "$TAILSCALE_HOSTNAME" ]; then
  HEROKU_APP_NAME=${HEROKU_APP_NAME:-${APP_NAME:-$(hostname)}}
  # Swap the . and _ in the dyno with a - since tailscale doesn't allow for periods.
#  DASH_DYNO=${DYNO//./-}
#  DASH_DYNO=${DYNO//_/-}
#  $(echo "$DYNO" | tr '._' '-')
#
  TAILSCALE_HOSTNAME="heroku-$HEROKU_APP_NAME-$(echo "$DYNO" | tr '._' '-')"
#  echo "Using Tailscale hostname: $TAILSCALE_HOSTNAME"
fi

script_dir="$(dirname "${BASH_SOURCE[0]}")"
. "$script_dir/tailnet"
. "$script_dir/tailscale_daemon"
. "$script_dir/tailscale_latest_release"
. "$script_dir/tailscale_status"

function log_tailscale_error() {
  echo "[tailscale] ERROR:" $*
}

function log_tailscale_info() {
  echo "[tailscale]:" $*
}

function log_tailscale_warn() {
  echo "[tailscale] WARN:" $*
}

function tailscale_running() {
  timeout=${TAILSCALE_RUNNING_TIMEOUT:-5} # Timeout in seconds
  interval=0.5  # Interval between checks

  # convert to milliseconds so we can use integer math
  timeout_ms=$(awk "BEGIN {print $timeout * 1000}")
  interval_ms=$(awk "BEGIN {print $interval * 1000}")

  elapsed=0

  while [ "$elapsed" -lt "$timeout_ms" ]; do
    state=$(tailscale_status_json | jq -r .BackendState)

    if [ "$state" = "Running" ]; then
      return 0
    fi

    sleep "$interval"

    elapsed=$((elapsed + interval_ms))
  done

  return 1
}

"$@"
